
Sprint10_Escravo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001fc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000709  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00000a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000259  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000173  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  9e:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
//Protótipos
void anima_semaforo(uint8_t i);


ISR(USART_RX_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	anima_semaforo(UDR0-'0');
  d2:	86 ec       	ldi	r24, 0xC6	; 198
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	80 81       	ld	r24, Z
  da:	80 53       	subi	r24, 0x30	; 48
  dc:	0e 94 85 00 	call	0x10a	; 0x10a <anima_semaforo>
}
  e0:	00 00       	nop
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	bf 91       	pop	r27
  ec:	af 91       	pop	r26
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	7f 91       	pop	r23
  f4:	6f 91       	pop	r22
  f6:	5f 91       	pop	r21
  f8:	4f 91       	pop	r20
  fa:	3f 91       	pop	r19
  fc:	2f 91       	pop	r18
  fe:	0f 90       	pop	r0
 100:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <anima_semaforo>:

void anima_semaforo(uint8_t i)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	63 97       	sbiw	r28, 0x13	; 19
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	8b 8b       	std	Y+19, r24	; 0x13
	const uint16_t estados[9] = {0b011110000, 0b001110000, 0b000110000, 0b000010000, 0b000001111, 0b000000111,0b000000011, 0b000000001,0b100000000};
 120:	22 e1       	ldi	r18, 0x12	; 18
 122:	e0 e0       	ldi	r30, 0x00	; 0
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	ce 01       	movw	r24, r28
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	dc 01       	movw	r26, r24
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	2a 95       	dec	r18
 132:	e1 f7       	brne	.-8      	; 0x12c <anima_semaforo+0x22>
	
	PORTB = estados[i] & 0b011111111;
 134:	85 e2       	ldi	r24, 0x25	; 37
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	2b 89       	ldd	r18, Y+19	; 0x13
 13a:	22 2f       	mov	r18, r18
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	ae 01       	movw	r20, r28
 144:	4f 5f       	subi	r20, 0xFF	; 255
 146:	5f 4f       	sbci	r21, 0xFF	; 255
 148:	24 0f       	add	r18, r20
 14a:	35 1f       	adc	r19, r21
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	31 81       	ldd	r19, Z+1	; 0x01
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
	if(estados[i] & 0b100000000)
 156:	8b 89       	ldd	r24, Y+19	; 0x13
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	9e 01       	movw	r18, r28
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	82 0f       	add	r24, r18
 168:	93 1f       	adc	r25, r19
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	91 81       	ldd	r25, Z+1	; 0x01
 170:	88 27       	eor	r24, r24
 172:	91 70       	andi	r25, 0x01	; 1
 174:	89 2b       	or	r24, r25
 176:	51 f0       	breq	.+20     	; 0x18c <anima_semaforo+0x82>
		PORTD |= 0b10000000;
 178:	8b e2       	ldi	r24, 0x2B	; 43
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	2b e2       	ldi	r18, 0x2B	; 43
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	20 68       	ori	r18, 0x80	; 128
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
	else
		PORTD &= 0b01111111;
}
 18a:	09 c0       	rjmp	.+18     	; 0x19e <anima_semaforo+0x94>
	
	PORTB = estados[i] & 0b011111111;
	if(estados[i] & 0b100000000)
		PORTD |= 0b10000000;
	else
		PORTD &= 0b01111111;
 18c:	8b e2       	ldi	r24, 0x2B	; 43
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	2b e2       	ldi	r18, 0x2B	; 43
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	20 81       	ld	r18, Z
 198:	2f 77       	andi	r18, 0x7F	; 127
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
}
 19e:	00 00       	nop
 1a0:	63 96       	adiw	r28, 0x13	; 19
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	cd bf       	out	0x3d, r28	; 61
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <main>:




int main(void)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0b11111111;
 1ba:	84 e2       	ldi	r24, 0x24	; 36
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18
	DDRD = 0b10000000;
 1c4:	8a e2       	ldi	r24, 0x2A	; 42
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	20 e8       	ldi	r18, 0x80	; 128
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
	
	UBRR0H = (unsigned char)(MYUBRR>>8);	//Ajusta a taxa de transmissão, parte alta
 1ce:	85 ec       	ldi	r24, 0xC5	; 197
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	10 82       	st	Z, r1
	UBRR0L = (unsigned char)MYUBRR;		//Ajusta a taxa de transmissão, parte baixa
 1d6:	84 ec       	ldi	r24, 0xC4	; 196
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //Habilita a interrup. do receptor, Habilita o transmissor e o receptor
 1e0:	81 ec       	ldi	r24, 0xC1	; 193
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	28 e9       	ldi	r18, 0x98	; 152
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
	UCSR0C = (3<<UCSZ00); //Ajusta o formato do frame: 8 bits de dados e 1 de parada, paridade none
 1ea:	82 ec       	ldi	r24, 0xC2	; 194
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	26 e0       	ldi	r18, 0x06	; 6
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
	
	sei();
 1f4:	78 94       	sei
    while(1)
	{
		
	}
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <main+0x44>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
